* 가끔 404 에러 뜰 때 : 프로젝트 우클릭 -> Properties -> Deployment Assembly에서 Maven Dependencies 있는지 체크

2019-02-13 (수)

maven -> conf -> settings 열어준다.

53번째 라인을 주석 밖으로 빼낸다.

<localRepository>c:/dev/apache-maven-3.6.0/repository</localRepository>

sts -> window -> preferences -> maven -> user settings에서

user settings 경로를 압축 푼 폴더의 maven -> conf -> settings로 바꿔준다.

sts -> window -> preferences -> Team -> Ignored Resources -> Add Pattern -> */target/*

프로젝트는 Spring Legacy Project로 생성

Templates -> Spring MVC Project 선택

스프링은 패키지를 자동으로 설정되게 함 

-> 단, 3계층 이상이어야 함
-> 마지막 계층이 서버에서 root context가 됨

src/main/java : com.kh.spring에서 spring이 root context
root context는 자동으로 src의 webapp을 가르킴 
-> 즉, request.getContextPath()를 사용했을 때 메인경로가 /spring이 됨
-> /spring은 src의 webapp을 가르킴

src/main/resources : 환경설정파일 (mybatis 연동시 mybatis 환경설정파일들 (config, mapper ...)을 넣는다)

log4j (로그를 남김) : level 단위로 출력유무 설정

test : test를 위한 소스코드 작성 (Spring의 가장 큰 장점 -> 단위 테스트 (백단 연결하지 않고도
컨트롤러 테스트 가능 -> 중간중간에 테스트가 가능해져서 완성도 및 편의성이 높음)

JRE System Library, Maven Dependencies : jar 파일 저장

c드라이브의 dev -> apache-maven-3.6.0 -> repository : jar 파일 보관소

src -> resources : js, css, image 파일 저장 가능
src -> WEB-INF : views에 있는 jsp는 외부에서 접근불가 (서블릿을 거쳐야만 접근가능)
root-context.xml : db처럼 공용으로 쓸 정보들을 저장

----------------------------------------------------------------------------------------------------------------------------------

2019-02-14 (목)

target -> pom.xml
<java-version>1.8</java-version>
<org.springframework-version>5.0.6.RELEASE</org.springframework-version>

<dependency>를 등록해주면 해당하는 경로를 통해서 maven 홈페이지의 repository가 제공하는 file을 받아올 수 있음
(file이 제대로 안받아질수도 있음 -> 지웠다가 깔면 됨)

Spring은 version을 맞춰주는게 중요

https://mvnrepository.com/
(1) Mybatis -> 3.4.6 version -> Maven에 있는 내용 복사 -> pom.xml
<!--  DataBase적용 -->
<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
<dependency>
    	<groupId>org.mybatis</groupId>
    	<artifactId>mybatis</artifactId>
    	<version>3.4.6</version>
</dependency>

(2) Mybatis Spring -> 1.3.2 version -> Maven에 있는 내용 복사 -> pom.xml
<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
<dependency>
   	<groupId>org.mybatis</groupId>
    	<artifactId>mybatis-spring</artifactId>
    	<version>1.3.2</version>
</dependency>

(3) Spring JDBC -> 아무 version -> Maven에 있는 내용 복사 -> pom.xml
<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    	<groupId>org.springframework</groupId>
    	<artifactId>spring-jdbc</artifactId>
    	<version>${org.springframework-version}</version>
</dependency>

(4) Common DBCP -> commons DBCP 1.4 version -> Maven에 있는 내용 복사 -> pom.xml
<!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp -->
<dependency>
    	<groupId>commons-dbcp</groupId>
    	<artifactId>commons-dbcp</artifactId>
    	<version>1.4</version>
</dependency>

/* (5)번은 pom.xml에서 지우자
(5) Ojdbc6 -> Ojdbc6 11.1.0.6.0 version -> Maven에 있는 내용 복사 -> pom.xml
<!-- https://mvnrepository.com/artifact/com.oracle.jdbc/ojdbc6 -->
<dependency>
    	<groupId>com.oracle.jdbc</groupId>
    	<artifactId>ojdbc6</artifactId>
    	<version>11.1.0.6.0</version>
    	<scope>runtime</scope>
</dependency>
*/

Ojdbc6 저장했을 때 에러나면 pom.xml에 등록하지 않고 사설을 등록하거나 라이브러리로 등록 -> ojdbc jar파일을 lib에 저장

web.xml -> version 변경
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
version="3.1">

web.xml -> was에 대한 환경설정
servlet-context.xml -> Spring 컨테이너가 자동으로 돌아갈 때 필요한 환경설정을 해줌 (Spring이 쓸 객체를 직접 등록하지 않아도 자동으로 찾아서 환경설정을 해줌)

컨트롤러에서 매핑된 메소드의 파라미터
HttpServletRequest
HttpServletResponse
HttpSession
java.util.Locale
InputStream/Reader
OutputStream/Writer
@PathVariable (주소창에 찍힌경로)
@RequestParam (전달된 파라미터값 -> 값이 넘어오지 않을 때 기본값 설정가능, 자료형, 변수명을 작성하면 자동으로 대입 해준다.
단, 변수명이 form의 name명이랑 같아야함)
@RequestHeader
@CookieValue
@RequestBody : ajax전송시 json객체를 파라미터로 받아옴 (maven에서 json에 대한 dependency 등록을 해줘야 함)
map, model (request.setAttribute를 model.set으로...), modelMap : 객체로 받는것
command : vo객체에 알아서 넣어줌
Sessionstatus : @SessionAttribute에 설정된 값을 관리

@RequestParam(value="devAge") int age -> devAge라는 이름으로 받아온 parameter값을 age에 넣어라

----------------------------------------------------------------------------------------------------------------------------------

2019-02-15 (금)

Tomcat server 설정 -> Server Options에서 Serve modules without publishing 체크

프로젝트의 Properties -> Project Facets -> Dynamic Web Module Version : 3.1, Java Version : 1.8

classpath : /src/main/resources까지 자동으로 찾아간 후 그 뒤의 경로를 찾아감

404 -> project가 제대로 로딩이 안됐을때도 뜸 -> console창에서 맨 밑에만 보지말고 에러가 났는지 확인해줘야 함

jstl jar 파일을 못불러오는 경우에 500에러 발생 -> lib에 jstl jar파일을 넣어주자

web.xml의 <filter-mapping>
-> <url-pattern>/<url-pattern> : Servlet만 걸러냄 -> 홈페이지에서 정보 입력 후 insert 했을 때 db에 한글이 깨져서 들어감
-> <url-pattern>/<url-pattern> : Servlet뿐만 아니라 JSP도 걸러냄 -> 한글 안깨짐

TypeHandelr 인터페이스를 구현한 클래스를 작성하면 끝 (mapper에서 foreach를 쓰지않고 배열을 처리하는 방법, 자료형만 맞춰주면 됨)

Mybatis에서 default값은 PreparedStatement

----------------------------------------------------------------------------------------------------------------------------------

2019-02-18 (월)

DB에 비밀번호를 저장할때는 개인정보 보호법에 의해 암호화처리를 반드시 해야한다.

Spring에서 제공하는 모듈을 이용 -> 인증, 권한을 부여하는 모듈을 제공 -> SpringSecurity -> 암호화하는것을 이용
-> 1. ShaPasswordEncoder (안돼! 4.1 이후 -> 그냥 쓰지마)
-> 2. BcryptPasswordEncoder (얘로 암호화 하자)

pom.xml
<!-- 스프링 시큐리티등록 -->
(1)
<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-core -->
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-core</artifactId>
    <version>5.0.6.RELEASE</version>
</dependency>

(2)
<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-web -->
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-web</artifactId>
    <version>${org.springframework-version}</version>
</dependency>

(3)<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-config -->
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-config</artifactId>
    <version>${org.springframework-version}</version>
</dependency>

src -> main -> webapp -> spring -> appServlet -> Spring Bean Configuration file -> security-context.xml
-> security, beans 클릭 후 생성

web.xml
<param-value>에 /WEB-INF/spring/appServlet/security-context.xml 추가

$ : 문자 그대로의 내용을 출력 (예를들어 abc라 입력하면 'abc'처럼 나옴)
# : 형식(자료형)에 맞게 출력
(JSP에서 폼태그로 넘길때가 아니라 Mapper에서 SQL문 작성시 PreparedStatement에서 setString, setInt, setDate 중 자료형에 맞게 맞춰줌
즉, DB에 넣을 때 DB형식에 맞춰줌)

Controller에서 DB에서 받아온 값을 request 또는 model에 attribute를 담아서 JSP로 보내줄 때 스크립트릿에서 따로 선언을 하지 않아도
attribute값을 바로 사용할 수 있다. 예를들어서 model.addAttribute로 Dev 테이블에있는 목록들을 뽑아와서 ("list", list)로 devList.jsp에
보내줬을 때 스크립트릿 안에서 따로 선언을 하지 않아도 EL의 $ 덕분에 attribute에 담아온 값들을 바로 사용가능 (EL이 알아서 검색)

Session으로 아이디 값을 유지하는 방법은 HttpSession에서 setAttribute하거나 model 객체에 넣어준 것을 @SessionAttributes로 가져온다.
header.jsp에서 쿼리스트링 사용시 EL형식으로 sessionScope.userId를 보내주는것은 쿼리스트링에 아이디를 담아서 보내주는 것 뿐임
@SessionAttributes를 사용하면 알아서 session 영역으로 들어감

----------------------------------------------------------------------------------------------------------------------------------

2019-02-19 (화)

return type (Member의 멤머변수명)과 DB의 column명이 같다면 mapper에서 select할 때 *을 사용할 수 있음
다르면 resultMap을 만들던지 별칭을 만들던지 해야함

<resultMap type="member" id="memberType">
	<result column='hobby' property="hobby" typeHandler="strArray"/>
</resultMap>
resultMap -> Mybatis가 사용하는 객체
type -> 자바에서 사용하는 타입
id -> mapper에서 쓸 구분자 (변수명)
result -> 결과값을 변경해주는 것 (hobby는 명칭은 같지만 자료형이 다름 -> DB에는 배열이 없기 때문에)
typeHandler -> typeHandler를 지정해주면 strArray의 getResult를 이용해서 타입을 Array로 변경해서 전달해준다.
column -> resultSet의 column
property의 hobby -> member의 hobby

log4j & interceptor
log4j : 프로그램에서 로그(기록)를 남기는 기능을 하는 것. 즉, 프로그램이 돌아가면서 필요한 내용에 대한 기록을 남기는 역할
slf4j (Simple loggin Facade for Java) : 프레임워크, 추상체 역할 -> 로그를 남기는 각 프레임워크를 연동(호환성)

log4j.xml
appender : console에 log를 찍는 객체를 등록
appender의 value : p : 이벤트, c : 카테고리, m : 메시지
layout : log를 찍을 때 출력할 구조 (HTML, XML, Simple, Pattern -> 원하는 방식대로 출력할 수 있게 해줌)
logger : 패키지명을 조사해서 log4j가 있으면 console에 모두 찍어라
logger의 level : debug < info < warn < error < fatal -> level을 설정, 해당하는 레벨까지만 출력
root : 위의 로그들을 기록한 후 최종적으로 어떤 appender를 이용하여 출력할 것인지 명시

* %c : 카테고리명(logger이름)을 표시
   * 카테고리명이 a.b.c일때, %c{2}는 b.c를 출력
* %C : 클래스명을 표시함.   
   * 풀 클래스 명이 com.kh.logger일때, %C{2}는 kh.logger를 출력
* %d : 로그 시간을 출력한다. java.text.SimpleDateFormat에서 적절한 출력 포맷을 지정할 수 있다. 
   * %d{HH:mm:ss, SSS}
   * %d{yyyy MMM dd HH:mm:ss, SSS}
   * %d{ABSOLUTE} 
   * %d{DATE} 
   * %d{ISO8601}
* %F : 파일명을 출력. 로그시 수행한 메소드, 라인번호가 함께 출력된다.
* %l : 로깅이 발생한 caller의 위치정보. 자바파일명:라인번호(링크제공) 
* %L : 라인 번호만 출력한다(링크없음)
* %m : 로그로 전달된 메시지를 출력한다.
* %M : 로그를 수행한 메소드명을 출력한다. 
* %n : 플랫폼 종속적인 개행문자가 출력. rn 또는 n
* %p : 로그 이벤트명등의 priority 가 출력(debug, info, warn, error, fatal )
* %r : 로그 처리시간 (milliseconds)
* %t : 로그이벤트가 발생된 쓰레드의 이름을 출력
* %% : % 표시를 출력. escaping
* %r : 어플리케이션 시작 이후 부터 로깅이 발생한 시점의 시간(milliseconds)
* %X : 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다. %X{key} 형태

참고 : https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html

com.kh.spring에 log 테스트용 클래스를 만든 후 logger 출력

error.jsp 만들었을 때 isErrorPage="true" 해주면 exception 객체가 알아서 넘어옴 (단, exception은 EL로 접근불가)

interceptor : 필터와 비슷한 기능 -> 요청이 갈 때 가로챔
-> 세 가지 방법 : 요청하자마자 (서블릿에 갈 때), 요청된 응답이 응답될 때 (응답시점), 응답이 완전히 완료됐을 때
-> 필터는 서블릿에 가기전에 가로챈 후 서블릿에 보내줌
-> interceptor는 dispatcher 서블릿으로 간 후 서블릿에서 해당하는 Mapping 메소드로 갈 때 가로채서 처리

HandlerInterceptorAdapter를 상속해서 클래스를 구현 -> 해당하는 메소드를 오버라이딩 처리하여 구현
-> preHandle : 컨트롤러(메소드)를 호출하기 전
-> postHandle : 컨트롤러(메소드)가 리턴하는시점 (메시지가 먼저 뜨고 화면이 뜸)
-> afterCompletion : view처리까지 끝나고 (화면이 먼저 뜨고 메시지)

호출되는 mapping값을 등록!
1. 클래스 작성
2. interceptor로 등록 (servlet-context.xml에 등록), mapping값도 같이 등록 (패턴사용)

com.kh.spring.common에 LoggerInterceptor class 등록
-> Superclass에서 HandlerInterceptorAdapter 추가해준 후 클래스 생성

클래스 생성 후 servlet-context.xml에 등록
<interceptors>
	<interceptor>
		<!-- <mapping path="/**"/> -->
		<mapping path="/member/*.do"/>
		<exclude-mapping path="/board/*"/>
		<beans:bean id="loggerInterceptor" class="com.kh.spring.common.LoggerInterceptor"/>
	</interceptor>
</interceptors>

path="/**" : 전체경로를 의미 (첫 번째 * : 경로, 두 번째 * : 파일)
/member/*.do : member로 시작하는 전체의 .do
/member/login.do : login.do만
<exclude-mapping> : 전체 중에서 해당하는 path만 빼고 나머지 전체

interceptor : 컨트롤러를 들어가기 전에 가로채기 때문에 prefix, suffix가 붙지 않으므로 기존 서블릿처럼 경로 및 파일형태를 붙여줘야 함

sql에서 log4j 처리 : DB에 대한 정보를 다 보여주기 때문에 디버깅 용도로만 쓰자
pom.xml
<!-- https://mvnrepository.com/artifact/org.lazyluke/log4jdbc-remix -->
<dependency>
    <groupId>org.lazyluke</groupId>
    <artifactId>log4jdbc-remix</artifactId>
    <version>0.2.7</version>
</dependency>

root-context.xml 변경 (파일 참고)
-> 새로 추가한 bean의 역할 : DB관련하여 남기고 싶은 log를 보관해놓음

log로 console이나 파일에 error를 남긴다 : 자바 코드 내에서 어떤 에러든지 발생했을 때 log로 남겨준다는 의미
단, 파일을 이용하여 로그를 남길 때는 파일이 단방향 통신이기 때문에 열려있는 상태에서 에러가 발생했을 때는 에러가 갱신이 되지 않고
파일을 닫았다가 열어야 에러 내용이 갱신이 된다. (logger가 있을 때 남김)
에러를 로그로 남길 때는 업체에서 로그 남기는 기준에 의해 정하면 됨

log4j.xml에서 logger name을 정해 줄 때 com.kh.spring이라 해주면 com.kh.spring.x.x에 해당하는 패키지들도 logger의 level이 모두 적용 됨

----------------------------------------------------------------------------------------------------------------------------------

2019-02-20 (수)

AOP (관점 지향 프로그래밍) : 관점에 따라 기능을 분리하는 것
비지니스로직(주)과 공통모듈(보조)로 구분하여 비지니스로직이 실행될 때 공통모듈을 전/후/전후에 실행되게 함

1. Aspect(관점) : 구현하고자 하는 횡단 관심사의 기능, 한 개 이상의 Pointcut(발생되는 메소드)과 Advice(발생시기)의 조합으로 이루어짐
2. Jointpoint(끼어들기 지점) : 메소드가 호출되는부분/리턴되는부분, 인스턴스가 만들어지는 지점, 예외가 던져지는 지점,
클래스가 초기화되는 지점
3. Pointcut : 어느메소드, 어느클래스 패턴방식을 이용하여 설정 (AspectJ 모듈이 지원하는 패턴!)
4. advice : 각 조인포인트에 삽입되어져 동작할 수 있는 코드
-> Before Advice : 메소드 실행 전
-> Around Advice : 메소드 실행 전, 후
-> AfterReturning Advice : 메소드 리턴시 (리턴된 오브젝트에 접근가능)
-> After : 메소드 실행 후
-> After Throwing : 예외발생 시 실행
5. weaving : 끼어드는처리를 하는 것

AOP적용방법 : 2가지
1. 선언적 표현 : xml에 설정!
2. 어노테이션 : 어노테이션으로 설정!

참고 : https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/aop.html#aop-pointcuts-examples

예)
-> JDBC를 했을 때 connection을 dao에서 수행 (모든 관심이 dao에 집중), 부수적으로 DB Conneciton 관련 정보를 가져오고 있었음
dao 객체의 관심은 DB에서 데이터를 가져오는 것 뿐인데 Connection을 가져오는 기능도 수행을 하고 있었음
Connection을 가져오는 기능을 분리 -> 관점 분리

-> member, notice, board, gallary라는 dao가 있다 -> 각 dao의 관심은 DB에 가서 쿼리문을 실행하고 그에 해당하는 데이터를 가져오는 것
단, DB Connection이라는 기능은 공통적으로 수행을 해야 하는데 이러한 기능들을 따로 분리하는 것이 AOP라 보면 됨
각 dao에서 insert를 하는 구문이 있을 때 insert를 실행하게끔 하는 AOP를 하나 만든다고 보면 됨
-> insert를 실행시키도록 하는 AOP를 만들고 이 AOP가 각 dao의 insert를 실행시키도록 함
(각 객체에서 횡단에 공통적으로 들어가는 것을 분리하여 클래스로 만들어 놓는 것이 AOP)

-> Member를 관리하고 조회하는 manager, select라는 controller가 있다 -> 각 controller의 관심은 회원들을 관리하고 조회하는 것 뿐
단, admin인지 확인하는 기능은 공통적으로 수행을 해야 하는데 이러한 기능을 따로 분리하는 것이 AOP

-> 인터셉터, 필터와 비슷
인터셉터는 dispatcher servlet spring bean controller 사이에서 가로챔 (전, 중, 후)
AOP는 dao든 service든 controller든 내가 표현한 메소드나 객체를 실행할 때

pom.xml
<!-- https://mvnrepository.com/artifact/aspectj/aspectjweaver -->
<dependency>
    	<groupId>aspectj</groupId>
    	<artifactId>aspectjweaver</artifactId>
    	<version>${org.aspectj-version}</version>
</dependency>

AOP 적용 방법
1. 공통모듈을 관리하는 객체를 생성
2. AOP적용 (선언적 xml, 어노테이션)

xml 생성 -> appServlet에 Spring Bean Configuration file -> aspect-context.xml -> aop, beans 선택
xml 파일 작성법
1. root 태그 : <aop:config></aop:config>
	<aop:aspect> : 적용객체 등록
	<aop:pointcut> : 적용시킬 메소드, 객체
	<aop:advice(before...)> : aop로 실행될 메소드, 적용할 pointcut 등록

* com.kh.spring..*(..) : 접근제한자(*), 클래스명(com.kh.spring), 메소드명(*), 매개변수(..)

<aop:pointcut expression="execution(* com.kh.spring..*(..))" id="pcAll"/>
<aop:before method="loggerAdvice" pointcut-ref="pcAll"/>

spring 밑의 모든 메소드들이 실행되기 전에 loggerAdvice를 실행해라 (before일 때)

web.xml 변경 (파일 참고)
-> 새로 등록하려는 AOP는 DB처럼 공용으로 사용하는 것이 아니라 해당 어플리케이션에서만 사용하기 때문에 root가 아니라 application쪽에
등록

----------------------------------------------------------------------------------------------------------------------------------

2019-02-22 (금)

게시판 만들기
1. 디비 자료 저장 (BOARD, ATTACTHMENT)
2. 게시판 LIST 불러오기 만들기 
3. 페이징처리(템플릿을 이용하여 만듬)
4. COMMON에 PageFactory 클래스 하나를 만든다 .
5. 컨트롤러에 들어가서 게시판리스트 불러오는 매소드에 매개변수 수정한다. 

BoardList 매소드에
public ModelAndView BoardList(@RequestParam(value="cPage", required=false, defaultValue="0") int cPage) 
이렇게 수정

@RequestParam(value="cPage", required=false, defaultValue="0") -> 예외 처리했던구문이 여기에 다 들어가게됨

int numPerPage = 5;
int contentCount = service.selectBoardCount();
내용 추가
service.boardList(cPage,numPerPage); 에 cPage, numPerPage 추가

mv.addObject("pageBar",PageFactory.getPageBar(contentCount, cPage, numPerPage, "/spring/board/boardList")); 추가

메인홈페이지에서 로그인 안하면 게시판을 못들어가도록 
서블릿 컨텍스트 xml에  <mapping path="/board/*"/> 에 추가 

6.게시판 작성 부분 만들기 

//파일업로드

porm.xml 에서 아래내용 추가
<!--  파일업로드라이브러리  -->
 <!--
 https://mvnrepository.com/artifact/commons-io/commons-io 
-->
<dependency>
<groupId>commons-io</groupId>
<artifactId>commons-io</artifactId>
<version>2.6</version>
</dependency>
 <!--
 https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload 
-->
<dependency>
<groupId>commons-fileupload</groupId>
<artifactId>commons-fileupload</artifactId>
<version>1.3.3</version>
</dependency>


서블릿 컨텍스트 xml -> bean 추가
 
<!--  파일업로드 객체 설정 -->
<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<beans:property name="maxUploadSize" value="10485760"></beans:property>
</beans:bean>

BoardController 에서
boardFormEnd 매소드를 만든다.
ex) public String boardFormEnd(String boardTitle,String boardWriter, String boardContent, MultipartFile[] upFile )
하나만 받을때는 (MultipartFile upFile)
파일업로드를 받는 매개변수는 MultipartFile로 받으면 된다.
다중파일을 받을때는 배열로 받으면 된다.

boardFormEnd 매소드에 
내용 추가 

String saveDir = request.getSession().getServletContext().getRealPath("/resources/upload/board");


for(MultipartFile f : upFile)
		{
		/*logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"+f);
		logger.info("파라미터이름" + f.getName() );
		logger.info("파일이름"+ f.getOriginalFilename());
		logger.info("파일크기" + f.getSize());*/
			
			if(!f.isEmpty())
			{
				//파일명을 생성(rename)
				String orifileName =f.getOriginalFilename();
				String ext = orifileName.substring(orifileName.lastIndexOf("."));
				//rename 규칙 설정 
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd_HHmmssSSS");
				int rdv = (int)(Math.random()*1000);
				String reName = sdf.format(System.currentTimeMillis())+"_"+rdv+ext;
				try
				{
					f.transferTo(new File(saveDir+"/"+reName));
				}catch(IllegalStateException | IOException e)
				{
					e.printStackTrace();
				}
				
				Attachment att = new Attachment();
				att.setReNamedFileName(reName);
				att.setOriginalFileName(orifileName);
				files.add(att);
			}		
		}

7.attachment vo 만들기

String saveDir = request.getSession().getServletContext().getRealPath("/resources/upload/board") 아래에 내용 추가 
	Map<String,String> board = new HashMap();
	board.put("title", boardTitle);
	board.put("writer", boardWriter);
	board.put("content", boardContent);
	ArrayList<Attachment> files = new ArrayList<>();

맨아래에 
int result = service.insertBoard(board,files); 추가

컨트롤러 ->서비스 연결 

common 패키지에 
BoardException 클래스를 만든다 .
	public BoardException() {
		super();
	}
	
	public BoardException(String msg)
	{
		super(msg);
	}

내용을 추가한다
서비스 - > DAO 연결

----------------------------------------------------------------------------------------------------------------------------------

2019-02-25 (월)

02-18 (월) 부분에 추가할 내용
security-context.xml에 <bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/> 추가

스프링에서 트랜잭션 : commit할 것인지 rollback할 것인지 판단해주기 위한 용도, commit이나 rollback이 필요한 insert, update, delete를
aop개념으로 묶어서 트랜잭션 처리 한다고 생각
에러페이지를 띄워주는건 사용자에게 보여주기 위한것이지 트랜잭션의 목적은 아님

SQLException -> RuntimeException

여러개의 로직이 있고 에러가 발생하였을 때를 대비하여 트랜잭션 처리를 해줘야 함 (AOP와 같이 적용)

스프링에서 트랜잭션처리
1. jdbc.datasource.DataSourceTransactionManager 객체를 이용
2. 두 가지 방식
-> 어노테이션 (알아서 내부적으로 처리) : 해당 메소드 위에 @Transactional(옵션)
-> 선언적 처리 (하나씩 선언, 등록) : 스프링 컨테이너가 돌아갈 때 환경설정에 관련된 것, xml파일을 만든 후 web.xml 파일에 등록을 해 주면 됨

선언적 처리 : servlet-context.xml
-> *tx : 네임스페이스 등록
-> <tx:advice> : 실행되는 메소드
	<tx:attributes>(옵션) : 어떤 경우일 때 실행시킬지, 메소드 들을 묶어서 관리
		<tx:method> : 메소드 지정, rollback-for="Exception" : Exception 발생하면 rollback 해라

옵션값
* readonly : 읽기전용 (select 처리 시)
* isolation : 트랜잭션 독립성
* propagation : 트랜잭션 전파 ((예)이미 진행되고 있는 트랜잭션에 참여할 것인지, 참여하지 않을 것인지)
* timeout : 시간
* rollbackfor : exception 발생!
* rollbackforClassName : 
* noRollbackFor : 
* noRollbackForClassName : 

트랜잭션 전파 (propagation) : 트랜잭션의 시작이나 기존 트랜잭션에 참여하는 방법을 결정하는 속성
-> 트랜잭션의 적용범위를 묶어서 커다란 트랜잭션을 만들 수 있음
-> DB에 따라 조금씩 다르게 적용 (yes or no)
* required(디폴트) : 미리 시작된 트랜잭션 참여, 없으면 새로 생성
* support : 이미 시작된 트랜잭션이 있으면 참여, 없으면 트랜잭션을 만들지 않음
* mandatory : required 없으면 예외처리, 독립적인 트랜잭션을 사용하면 안될 때 사용
* required_new : 항상 새로운 트랜잭션
* not_supported : 트랜잭션 사용안함 (실행중인 트랜잭션이 있으면 보류)
* never : 트랜잭션 사용안함 (실행중인 트랜잭션이 있으면 예외처리)
* nested : 중첩트랜잭션, 실행중인 트랜잭션 위에 새로운 트랜잭션이 생성, 부모자식관계에서 새로 생성된 트랜잭션(자식)이 부모에게 영향을 주지 않고 자신만
commit, rollback, 그러나 부모는 자식에게 영향을 줌

isolation (격리수준) : 여러 트랜잭션이 작업할 때 작업에 대한 결과를 어떻게 처리할 지 정하는 것, 보통 DB 격리, default
* read_uncommitted : 가장 낮은수준의 격리, 커밋되기전에 읽을 수 있음
* read_committed : default, 커밋되면 읽을 수 있음, 읽은정보를 수정가능
* repeatable_read : 읽은정보를 수정 불가능
* serializable : 하나에 하나씩, 가장 강력한 격리

pom.xml : 외부의 라이브러리 파일들을 편하게 받아오는 기능

트랜잭션 처리
pom.xml에서 AspectJ 부분이 있어야 트랜잭션 처리가 가능

root-context.xml에 추가
<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"/>
</bean>

Source옆의 Namespaces에서 tx 클릭 후 <tx:annotation-driven transaction-manager="transactionManager"/> 추가

BoardService, BoardServiceImpl, BoardController, web.xml -> 파일 참고

Controller에서 RuntimeException 처리를 해주면 받아서 처리함

root-context.xml의 Namespaces에서 aop 선택

스프링 Ajax처리
전송하는 방식은 동일
$.ajax({});

스프링 컨테이너의 응답
응답 : 메소드의 리턴값!

1. Stream으로 보내기 : ServletOutputStream
2. ModelAndView : jsonView 등록, jsonView를 통해서 응답!
3. @ResponseBody return json 타입으로 변환해줌!

pom.xml에서 JsonView 등록
<!-- https://mvnrepository.com/artifact/net.sf.json-lib/json-lib-ext-spring -->
<dependency>
	<groupId>net.sf.json-lib</groupId>
	<artifactId>json-lib-ext-spring</artifactId>
	<version>1.0.2</version>
</dependency>

servlet-context.xml에서 jsonview 등록

<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="1"/>
</beans:bean>
<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>

jsonView로 넘길 때 유의사항 : Controller에서 mv.setViewName("");에 이름을 넣을 때 servlet-context.xml에 등록한 이름이랑 같아야 함

----------------------------------------------------------------------------------------------------------------------------------

2019-02-26 (화)

@ResponseBody를 사용하기 위해 pom.xml에 jackson 라이브러리 등록
<!-- jackson 라이브러리 등록 -->
<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
<dependency>
	<groupId>com.fasterxml.jackson.core</groupId>
	<artifactId>jackson-databind</artifactId>
	<version>2.9.5</version>
</dependency>

servlet-context.xml에 RequestMappingHandlerAdapter를 등록
<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
	<beans:property name="messageConverters">
		<beans:list>
			<beans:bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
		</beans:list>
	</beans:property>
</beans:bean>

----------------------------------------------------------------------------------------------------------------------------------

2019-02-27 (수)

member-mapper.xml에서 DB내의 컬럼 이름과 VO의 멤버변수 이름이 다를 때 다음과 같은 방식으로 맞춰줘야 오류가 나지 않음
<result column="member_no" property="memberNo"/>

결제 관련 (https://github.com/iamport/iamport-rest-client-java)
pom.xml에 두가지 추가
<repositories>
   <repository>
       <id>jitpack.io</id>
       <url>https://jitpack.io</url>
   </repository>
</repositories>

<dependencies>
   <dependency>
       <groupId>com.github.iamport</groupId>
       <artifactId>iamport-rest-client-java</artifactId>
       <version>0.2.0</version>
   </dependency>
</dependencies>

----------------------------------------------------------------------------------------------------------------------------------

2019-03-06 (수)

웹소켓 : 양방향 통신을 위해 사용하기 시작

Spring에서 기본적으로 websocket을 지원

spring websocket 모듈!

pom.xml에 websocket모듈 (의존성등록)

<!-- https://mvnrepository.com/artifact/org.springframework/spring-websocket -->
<dependency>
	<groupId>org.springframework</groupId>
	<artifactId>spring-websocket</artifactId>
	<version>5.0.6.RELEASE</version>
</dependency>

핸들러 (socket 관련 이벤트를 처리)
open : 연결됐을 때
onmessage : 메시지가 도착했을 때
close : 연결이 해제 됐을 때

핸들러 (객체)
TextMessageHandler
BinaryMessageHandler

spring 제공 상속받아서 구현을 함

객체구현후 spring에서 잘 돌아갈 수 있게 root-context.xml이나 servlet-context.xml 설정에 bean으로 등록

com.kh.spring.chatting -> ChattingHandler 클래스 작성 상위클래스에서 TextWebSocketHandler 선택

오버라이딩 할 함수 -> AbstractWebSocketHandler에서 Closed, Established, Text 선택

TextMessage : 대화명, 별도의 플래그값, 일반 문자 등등 -> json 방식으로 넘어옴 -> json 매퍼로 파싱후 이용

root.context.xml에 웹소켓 설정 추가
Namespaces에서 websocket 선택
<!-- 웹소켓 설정 -->
<!-- 객체등록 및 매핑설정 -->
<bean id="chatting" class="com.kh.spring.chatting.ChattingHandler"/>
<websocket:handlers>
	<websocket:mapping handler="/chatting" path="chatting"/>
	<websocket:handshake-interceptors>
		<bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
	</websocket:handshake-interceptors>
</websocket:handlers>